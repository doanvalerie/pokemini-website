{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":""},{"location":"#overview","title":"Overview","text":"<p>To showcase the knowledge we gained from the course EEC 172 \u2013 Embedded Systems, we exercise the skills taught in labs to design and implement a final project with increased complexity and creativity. Our project is titled Pok\u00e9mini Go, an application that is inspired by the popular game Pok\u00e9mon Go. For context, Pok\u00e9mon Go is a mobile application that uses augmented reality and the phone's GPS sensor to spawn collectible characters, called Pok\u00e9mon, on a real-world map. To capture Pok\u00e9mon, users must physically walk to real-world locations where the characters had spawned. As the user physically moves, their real-time location updates on a map displayed in the application. When the user reaches close proximity to that Pok\u00e9mon, they can attempt to catch it and add it to their collection. Our project Pok\u00e9mini Go is a simplified version of Pok\u00e9mon Go. Pok\u00e9mini Go implements the core functionality of Pok\u00e9mon Go by spawning Pok\u00e9mon characters at real coordinates. Users must walk to these coordinates to battle the Pok\u00e9mon and add it to their collection.</p>"},{"location":"#demo","title":"Demo","text":""},{"location":"implementation/","title":"Description","text":""},{"location":"implementation/#features","title":"Features","text":""},{"location":"implementation/#frontend","title":"Frontend","text":"<p>The user interface to Pok\u00e9mini Go will be a 128x128 OLED display. We implement four different OLED pages \u2013 a landing page, collection page, fight or flee page, and fight page. We describe these pages in greater detail below.</p> <p>We also implement a web app that displays a real-time map of all Pok\u00e9mon in our database. In addition to the coordinates displayed on the OLED landing page, the map serves as another interface to determine the locations at which a user can battle a Pok\u00e9mon. The map also displays a marker for the device on which the user has accessed the website. As the user physically moves, their real-time location will update on the map. </p>"},{"location":"implementation/#backend","title":"Backend","text":"<p>We implement RESTful APIs on an Express server that is hosted on a VPS, and use AWS DynamoDB to store Pok\u00e9mon and user data. We provide the following description as a brief overview of the high-level functionality that our backend offers. When a LaunchPad runs our application, its MAC address is obtained to check whether this is a new or existing user. If this is a new LaunchPad running our application, the server creates a unique user on AWS DynamoDB, and the new server starts with an empty collection. Otherwise, if an existing LaunchPad has already run our application, their collection of Pok\u00e9mon is retrieved from the database when the program is initialized. The user's collection of Pok\u00e9mon will be rendered on the collection page. As the user physically moves, the LaunchPad periodically makes HTTP GET requests for the Pok\u00e9mon closest to them. When the server makes these distance calculations, it performs additional calculations to ensure that enough Pok\u00e9mon have spawned around the user. In particular, the server will calculate if there are less than 10 existing Pok\u00e9mon in a 100 meter radius of the user; if this threshold is not met, the server generates more Pok\u00e9mon in the user's 100 meter radius. If the user is within a 10 meter radius of a Pok\u00e9mon, the server informs the LaunchPad that a fight should be activated. The fight or flee page is rendered on the OLED, and the user has the choice to flee from the Pok\u00e9mon and fight via a turn-based attack mini game. If the user fights the Pok\u00e9mon and wins, the Pok\u00e9mon is added to the user's collection. Both a fight or flee will result in the Pok\u00e9mon being deleted from the database of available characters to be battled.</p>"},{"location":"implementation/#hardware","title":"Hardware","text":"<p>We uses two sensing devices in our implementation of Pok\u00e9mon Go \u2013 an IR receiver and GPS module.</p>"},{"location":"implementation/#ir-receiver","title":"IR Receiver","text":"<p>An IR remote control is used to send signals to an IR receiver. We incorporate code from Lab 3 (\"IR Remote Control Texting Over a UART Link\") to decode these signals. We press buttons on the IR remote to get user input for the following functionalities: choosing to fight or flee, switching between the landing page and collection page, and playing the turn-based attack mini game on the fight page.</p>"},{"location":"map/","title":"Map","text":""}]}